############################################# PiHole ###########################################


services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      # DNS Ports
      - "53:53/tcp"
      - "53:53/udp"
      # Default HTTP Port
      - "8880:80/tcp" #THIS WAS "80:80/tcp" ORIGINALLY
      # Default HTTPs Port. FTL will generate a self-signed certificate
      # - "443:443/tcp"
      # Uncomment the line below if you are using Pi-hole as your DHCP server
      #- "67:67/udp"
      # Uncomment the line below if you are using Pi-hole as your NTP server
      #- "123:123/udp"
    environment:
      TZ: 'Europe/Zurich'
      # Set a password to access the web interface. Not setting one will result in a random password being assigned
      FTLCONF_webserver_api_password: 'XXXXXXXXXXXXX'
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      FTLCONF_dns_listeningMode: 'all'
    volumes:
      - './etc-pihole/:/etc/pihole/'
      - './etc-pihole/logs/pihole.log:/var/log/pihole/pihole.log'
      # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6. If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration. It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
      #- './etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      # Required if you are using Pi-hole as your DHCP server, else not needed
      - NET_ADMIN
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      - SYS_TIME
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
    restart: unless-stopped

##################################### Unbound (DNS Resolver) ###################################


  unbound:
    image: klutchell/unbound
    container_name: unbound
    restart: unless-stopped
    ports:
      - "5335:53/tcp"
      - "5335:53/udp"
    volumes:
      - ./unbound:/opt/unbound/etc/unbound
    environment:
      TZ: Europe/Zurich


################################################# Uptime Kuma ##################################


  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "8881:3001"
    volumes:
      - ./uptime-kuma-data:/app/data
    environment:
      TZ: Europe/Zurich


############################################### Dashy ##########################################

  dashy:
    container_name: Dashy

    # Pull latest image from DockerHub
    image: lissy93/dashy

    volumes:
      - /home/pi/pihole/dashy/conf.yml:/app/user-data/conf.yml
      - /home/pi/pihole/dashy/item-icons:/app/public/item-icons

    ports:
      - '8882:8080'

    # Set any environmental variables
    environment:
      - NODE_ENV=production
    # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
    #  - UID=1000
    #  - GID=1000

    # Specify restart policy
    restart: unless-stopped

    # Configure healthchecks
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s


  ####################################### WATCHTOWER ###########################################


  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Europe/Zurich
      - WATCHTOWER_CLEANUP=true             # Cleans the old docker files
      - WATCHTOWER_POLL_INTERVAL=86400      # Checks every 24h
      # optional: only watch particular containers
      # - WATCHTOWER_INCLUDE_STOPPED=true
      # - WATCHTOWER_LABEL_ENABLE=true



############################## NGINX PROXY MANAGER (REVERSE PROXY) #############################


  nginx-proxy-manager:
    image: 'docker.io/jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    ports:
      - '80:80'
      - '8883:81' # Admin Interface
      - '8443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    restart: unless-stopped


############################################ N8N ###############################################


  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    ports:
      - "8884:5678"
    environment:
      GENERIC_TIMEZONE: "Europe/Zurich"
      TZ: "Europe/Zurich"
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_RUNNERS_ENABLED: "true"
      N8N_SECURE_COOKIE: "false"
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped

volumes:
  n8n_data:
    external: true


################################################################################################